<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\ANO_RTOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\ANO_RTOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Nov 28 14:55:46 2023
<BR><P>
<H3>Maximum Stack Usage =       1032 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
send_data &rArr; mavlink_msg_raw_imu_encode_chan &rArr; mavlink_msg_raw_imu_pack_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">NMI_Handler</a><BR>
 <LI><a href="#[d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">HardFault_Handler</a><BR>
 <LI><a href="#[e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">MemManage_Handler</a><BR>
 <LI><a href="#[f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">BusFault_Handler</a><BR>
 <LI><a href="#[10]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">UsageFault_Handler</a><BR>
 <LI><a href="#[12]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">DebugMon_Handler</a><BR>
 <LI><a href="#[15]">GPIOA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">GPIOA_Handler</a><BR>
 <LI><a href="#[16]">GPIOB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">GPIOB_Handler</a><BR>
 <LI><a href="#[17]">GPIOC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">GPIOC_Handler</a><BR>
 <LI><a href="#[18]">GPIOD_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">GPIOD_Handler</a><BR>
 <LI><a href="#[19]">GPIOE_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">GPIOE_Handler</a><BR>
 <LI><a href="#[1a]">UART0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">UART0_Handler</a><BR>
 <LI><a href="#[1b]">UART1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">UART1_Handler</a><BR>
 <LI><a href="#[1c]">SSI0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">SSI0_Handler</a><BR>
 <LI><a href="#[1d]">I2C0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">I2C0_Handler</a><BR>
 <LI><a href="#[1e]">PMW0_FAULT_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">PMW0_FAULT_Handler</a><BR>
 <LI><a href="#[1f]">PWM0_0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">PWM0_0_Handler</a><BR>
 <LI><a href="#[20]">PWM0_1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">PWM0_1_Handler</a><BR>
 <LI><a href="#[21]">PWM0_2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">PWM0_2_Handler</a><BR>
 <LI><a href="#[22]">QEI0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">QEI0_Handler</a><BR>
 <LI><a href="#[23]">ADC0SS0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ADC0SS0_Handler</a><BR>
 <LI><a href="#[24]">ADC0SS1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC0SS1_Handler</a><BR>
 <LI><a href="#[25]">ADC0SS2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC0SS2_Handler</a><BR>
 <LI><a href="#[26]">ADC0SS3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">ADC0SS3_Handler</a><BR>
 <LI><a href="#[27]">WDT0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">WDT0_Handler</a><BR>
 <LI><a href="#[28]">TIMER0A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">TIMER0A_Handler</a><BR>
 <LI><a href="#[29]">TIMER0B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">TIMER0B_Handler</a><BR>
 <LI><a href="#[2a]">TIMER1A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">TIMER1A_Handler</a><BR>
 <LI><a href="#[2b]">TIMER1B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">TIMER1B_Handler</a><BR>
 <LI><a href="#[2c]">TIMER2A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">TIMER2A_Handler</a><BR>
 <LI><a href="#[2d]">TIMER2B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">TIMER2B_Handler</a><BR>
 <LI><a href="#[2e]">COMP0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">COMP0_Handler</a><BR>
 <LI><a href="#[2f]">COMP1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">COMP1_Handler</a><BR>
 <LI><a href="#[30]">COMP2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">COMP2_Handler</a><BR>
 <LI><a href="#[31]">SYSCTL_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">SYSCTL_Handler</a><BR>
 <LI><a href="#[32]">FLASH_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">FLASH_Handler</a><BR>
 <LI><a href="#[33]">GPIOF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">GPIOF_Handler</a><BR>
 <LI><a href="#[34]">GPIOG_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">GPIOG_Handler</a><BR>
 <LI><a href="#[35]">GPIOH_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">GPIOH_Handler</a><BR>
 <LI><a href="#[36]">UART2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">UART2_Handler</a><BR>
 <LI><a href="#[37]">SSI1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">SSI1_Handler</a><BR>
 <LI><a href="#[38]">TIMER3A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">TIMER3A_Handler</a><BR>
 <LI><a href="#[39]">TIMER3B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">TIMER3B_Handler</a><BR>
 <LI><a href="#[3a]">I2C1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">I2C1_Handler</a><BR>
 <LI><a href="#[3b]">QEI1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">QEI1_Handler</a><BR>
 <LI><a href="#[3c]">CAN0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">CAN0_Handler</a><BR>
 <LI><a href="#[3d]">CAN1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">CAN1_Handler</a><BR>
 <LI><a href="#[3e]">CAN2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">CAN2_Handler</a><BR>
 <LI><a href="#[3f]">HIB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">HIB_Handler</a><BR>
 <LI><a href="#[40]">USB0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">USB0_Handler</a><BR>
 <LI><a href="#[41]">PWM0_3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">PWM0_3_Handler</a><BR>
 <LI><a href="#[42]">UDMA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">UDMA_Handler</a><BR>
 <LI><a href="#[43]">UDMAERR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">UDMAERR_Handler</a><BR>
 <LI><a href="#[44]">ADC1SS0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">ADC1SS0_Handler</a><BR>
 <LI><a href="#[45]">ADC1SS1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">ADC1SS1_Handler</a><BR>
 <LI><a href="#[46]">ADC1SS2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">ADC1SS2_Handler</a><BR>
 <LI><a href="#[47]">ADC1SS3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">ADC1SS3_Handler</a><BR>
 <LI><a href="#[48]">GPIOJ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">GPIOJ_Handler</a><BR>
 <LI><a href="#[49]">GPIOK_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">GPIOK_Handler</a><BR>
 <LI><a href="#[4a]">GPIOL_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">GPIOL_Handler</a><BR>
 <LI><a href="#[4b]">SSI2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">SSI2_Handler</a><BR>
 <LI><a href="#[4c]">SSI3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">SSI3_Handler</a><BR>
 <LI><a href="#[4d]">UART3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">UART3_Handler</a><BR>
 <LI><a href="#[4e]">UART4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">UART4_Handler</a><BR>
 <LI><a href="#[4f]">UART5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">UART5_Handler</a><BR>
 <LI><a href="#[50]">UART6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">UART6_Handler</a><BR>
 <LI><a href="#[51]">UART7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">UART7_Handler</a><BR>
 <LI><a href="#[52]">I2C2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52]">I2C2_Handler</a><BR>
 <LI><a href="#[53]">I2C3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">I2C3_Handler</a><BR>
 <LI><a href="#[54]">TIMER4A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">TIMER4A_Handler</a><BR>
 <LI><a href="#[55]">TIMER4B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55]">TIMER4B_Handler</a><BR>
 <LI><a href="#[56]">TIMER5A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">TIMER5A_Handler</a><BR>
 <LI><a href="#[57]">TIMER5B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">TIMER5B_Handler</a><BR>
 <LI><a href="#[58]">WTIMER0A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[58]">WTIMER0A_Handler</a><BR>
 <LI><a href="#[59]">WTIMER0B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">WTIMER0B_Handler</a><BR>
 <LI><a href="#[5a]">WTIMER1A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a]">WTIMER1A_Handler</a><BR>
 <LI><a href="#[5b]">WTIMER1B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b]">WTIMER1B_Handler</a><BR>
 <LI><a href="#[5c]">WTIMER2A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c]">WTIMER2A_Handler</a><BR>
 <LI><a href="#[5d]">WTIMER2B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5d]">WTIMER2B_Handler</a><BR>
 <LI><a href="#[5e]">WTIMER3A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5e]">WTIMER3A_Handler</a><BR>
 <LI><a href="#[5f]">WTIMER3B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f]">WTIMER3B_Handler</a><BR>
 <LI><a href="#[60]">WTIMER4A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60]">WTIMER4A_Handler</a><BR>
 <LI><a href="#[61]">WTIMER4B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61]">WTIMER4B_Handler</a><BR>
 <LI><a href="#[62]">WTIMER5A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[62]">WTIMER5A_Handler</a><BR>
 <LI><a href="#[63]">WTIMER5B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[63]">WTIMER5B_Handler</a><BR>
 <LI><a href="#[64]">FPU_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64]">FPU_Handler</a><BR>
 <LI><a href="#[65]">I2C4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[65]">I2C4_Handler</a><BR>
 <LI><a href="#[66]">I2C5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66]">I2C5_Handler</a><BR>
 <LI><a href="#[67]">GPIOM_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[67]">GPIOM_Handler</a><BR>
 <LI><a href="#[68]">GPION_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68]">GPION_Handler</a><BR>
 <LI><a href="#[69]">QEI2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[69]">QEI2_Handler</a><BR>
 <LI><a href="#[6a]">GPIOP0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a]">GPIOP0_Handler</a><BR>
 <LI><a href="#[6b]">GPIOP1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6b]">GPIOP1_Handler</a><BR>
 <LI><a href="#[6c]">GPIOP2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c]">GPIOP2_Handler</a><BR>
 <LI><a href="#[6d]">GPIOP3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d]">GPIOP3_Handler</a><BR>
 <LI><a href="#[6e]">GPIOP4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">GPIOP4_Handler</a><BR>
 <LI><a href="#[6f]">GPIOP5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6f]">GPIOP5_Handler</a><BR>
 <LI><a href="#[70]">GPIOP6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70]">GPIOP6_Handler</a><BR>
 <LI><a href="#[71]">GPIOP7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">GPIOP7_Handler</a><BR>
 <LI><a href="#[72]">GPIOQ0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[72]">GPIOQ0_Handler</a><BR>
 <LI><a href="#[73]">GPIOQ1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">GPIOQ1_Handler</a><BR>
 <LI><a href="#[74]">GPIOQ2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[74]">GPIOQ2_Handler</a><BR>
 <LI><a href="#[75]">GPIOQ3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[75]">GPIOQ3_Handler</a><BR>
 <LI><a href="#[76]">GPIOQ4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[76]">GPIOQ4_Handler</a><BR>
 <LI><a href="#[77]">GPIOQ5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[77]">GPIOQ5_Handler</a><BR>
 <LI><a href="#[78]">GPIOQ6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">GPIOQ6_Handler</a><BR>
 <LI><a href="#[79]">GPIOQ7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[79]">GPIOQ7_Handler</a><BR>
 <LI><a href="#[7a]">GPIOR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">GPIOR_Handler</a><BR>
 <LI><a href="#[7b]">GPIOS_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7b]">GPIOS_Handler</a><BR>
 <LI><a href="#[7c]">PMW1_0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7c]">PMW1_0_Handler</a><BR>
 <LI><a href="#[7d]">PWM1_1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7d]">PWM1_1_Handler</a><BR>
 <LI><a href="#[7e]">PWM1_2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7e]">PWM1_2_Handler</a><BR>
 <LI><a href="#[7f]">PWM1_3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7f]">PWM1_3_Handler</a><BR>
 <LI><a href="#[80]">PWM1_FAULT_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[80]">PWM1_FAULT_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC0SS0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[24]">ADC0SS1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[25]">ADC0SS2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[26]">ADC0SS3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[44]">ADC1SS0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[45]">ADC1SS1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[46]">ADC1SS2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[47]">ADC1SS3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[f]">BusFault_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3c]">CAN0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3d]">CAN1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3e]">CAN2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[84]">CDCTickHandler</a> from usbdcdc.o(i.CDCTickHandler) referenced from usbdcdc.o(i.USBDCDCCompositeInit)
 <LI><a href="#[2e]">COMP0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2f]">COMP1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[30]">COMP2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[0]">ControlHandler</a> from ano_usb.o(i.ControlHandler) referenced 2 times from usb_serial_structs.o(.data)
 <LI><a href="#[8d]">DMAUSBIntHandler</a> from usbdma.o(i.DMAUSBIntHandler) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[8f]">DMAUSBIntStatusClear</a> from usbdma.o(i.DMAUSBIntStatusClear) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[90]">DMAUSBStatus</a> from usbdma.o(i.DMAUSBStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[12]">DebugMon_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[32]">FLASH_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[64]">FPU_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[15]">GPIOA_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[16]">GPIOB_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[17]">GPIOC_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[18]">GPIOD_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[19]">GPIOE_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[33]">GPIOF_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[34]">GPIOG_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[35]">GPIOH_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[48]">GPIOJ_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[49]">GPIOK_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4a]">GPIOL_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[67]">GPIOM_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[68]">GPION_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6a]">GPIOP0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6b]">GPIOP1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6c]">GPIOP2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6d]">GPIOP3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6e]">GPIOP4_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6f]">GPIOP5_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[70]">GPIOP6_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[71]">GPIOP7_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[72]">GPIOQ0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[73]">GPIOQ1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[74]">GPIOQ2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[75]">GPIOQ3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[76]">GPIOQ4_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[77]">GPIOQ5_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[78]">GPIOQ6_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[79]">GPIOQ7_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7a]">GPIOR_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7b]">GPIOS_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3f]">HIB_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[a5]">HandleConfigChange</a> from usbdcdc.o(i.HandleConfigChange) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[ab]">HandleDevice</a> from usbdcdc.o(i.HandleDevice) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[a9]">HandleDisconnect</a> from usbdcdc.o(i.HandleDisconnect) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[a6]">HandleEP0Data</a> from usbdcdc.o(i.HandleEP0Data) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[aa]">HandleEndpoints</a> from usbdcdc.o(i.HandleEndpoints) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[a4]">HandleRequests</a> from usbdcdc.o(i.HandleRequests) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[a8]">HandleResume</a> from usbdcdc.o(i.HandleResume) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[a7]">HandleSuspend</a> from usbdcdc.o(i.HandleSuspend) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[d]">HardFault_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1d]">I2C0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3a]">I2C1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[52]">I2C2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[53]">I2C3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[65]">I2C4_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[66]">I2C5_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[e]">MemManage_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1e]">PMW0_FAULT_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7c]">PMW1_0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1f]">PWM0_0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[20]">PWM0_1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[21]">PWM0_2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[41]">PWM0_3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7d]">PWM1_1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7e]">PWM1_2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7f]">PWM1_3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[80]">PWM1_FAULT_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[22]">QEI0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3b]">QEI1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[69]">QEI2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[b7]">Reset_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2]">RxHandler</a> from ano_usb.o(i.RxHandler) referenced 2 times from usb_serial_structs.o(.data)
 <LI><a href="#[1c]">SSI0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[37]">SSI1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4b]">SSI2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4c]">SSI3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[31]">SYSCTL_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[14]">SysTick_Handler</a> from drv_bsp.o(i.SysTick_Handler) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[28]">TIMER0A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[29]">TIMER0B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2a]">TIMER1A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2b]">TIMER1B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2c]">TIMER2A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2d]">TIMER2B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[38]">TIMER3A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[39]">TIMER3B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[54]">TIMER4A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[55]">TIMER4B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[56]">TIMER5A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[57]">TIMER5B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5]">TxHandler</a> from ano_usb.o(i.TxHandler) referenced 2 times from usb_serial_structs.o(.data)
 <LI><a href="#[1a]">UART0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1b]">UART1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[36]">UART2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4d]">UART3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4e]">UART4_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4f]">UART5_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[50]">UART6_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[51]">UART7_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[43]">UDMAERR_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[42]">UDMA_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[83]">USB0DeviceIntHandler</a> from usbdhandler.o(i.USB0DeviceIntHandler) referenced from ano_usb.o(i.AnoUsbCdcInit)
 <LI><a href="#[40]">USB0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1]">USBBufferEventCallback</a> from usbbuffer.o(i.USBBufferEventCallback) referenced 4 times from usb_serial_structs.o(.data)
 <LI><a href="#[3]">USBDCDCPacketRead</a> from usbdcdc.o(i.USBDCDCPacketRead) referenced 2 times from usb_serial_structs.o(.data)
 <LI><a href="#[6]">USBDCDCPacketWrite</a> from usbdcdc.o(i.USBDCDCPacketWrite) referenced 2 times from usb_serial_structs.o(.data)
 <LI><a href="#[4]">USBDCDCRxPacketAvailable</a> from usbdcdc.o(i.USBDCDCRxPacketAvailable) referenced 2 times from usb_serial_structs.o(.data)
 <LI><a href="#[7]">USBDCDCTxPacketAvailable</a> from usbdcdc.o(i.USBDCDCTxPacketAvailable) referenced 2 times from usb_serial_structs.o(.data)
 <LI><a href="#[ad]">USBDClearFeature</a> from usbdenum.o(i.USBDClearFeature) referenced from usbdenum.o(.constdata)
 <LI><a href="#[b2]">USBDGetConfiguration</a> from usbdenum.o(i.USBDGetConfiguration) referenced from usbdenum.o(.constdata)
 <LI><a href="#[b0]">USBDGetDescriptor</a> from usbdenum.o(i.USBDGetDescriptor) referenced from usbdenum.o(.constdata)
 <LI><a href="#[b4]">USBDGetInterface</a> from usbdenum.o(i.USBDGetInterface) referenced from usbdenum.o(.constdata)
 <LI><a href="#[ac]">USBDGetStatus</a> from usbdenum.o(i.USBDGetStatus) referenced from usbdenum.o(.constdata)
 <LI><a href="#[af]">USBDSetAddress</a> from usbdenum.o(i.USBDSetAddress) referenced from usbdenum.o(.constdata)
 <LI><a href="#[b3]">USBDSetConfiguration</a> from usbdenum.o(i.USBDSetConfiguration) referenced from usbdenum.o(.constdata)
 <LI><a href="#[b1]">USBDSetDescriptor</a> from usbdenum.o(i.USBDSetDescriptor) referenced from usbdenum.o(.constdata)
 <LI><a href="#[ae]">USBDSetFeature</a> from usbdenum.o(i.USBDSetFeature) referenced from usbdenum.o(.constdata)
 <LI><a href="#[b5]">USBDSetInterface</a> from usbdenum.o(i.USBDSetInterface) referenced from usbdenum.o(.constdata)
 <LI><a href="#[b6]">USBDSyncFrame</a> from usbdenum.o(i.USBDSyncFrame) referenced from usbdenum.o(.constdata)
 <LI><a href="#[10]">UsageFault_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[27]">WDT0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[58]">WTIMER0A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[59]">WTIMER0B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5a]">WTIMER1A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5b]">WTIMER1B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5c]">WTIMER2A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5d]">WTIMER2B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5e]">WTIMER3A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5f]">WTIMER3B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[60]">WTIMER4A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[61]">WTIMER4B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[62]">WTIMER5A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[63]">WTIMER5B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[82]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_tm4c123.o(.text)
 <LI><a href="#[9e]">fputc</a> from ano_usb.o(i.fputc) referenced from printf3.o(i.__0printf$3)
 <LI><a href="#[93]">iDMAUSBArbSizeSet</a> from usbdma.o(i.iDMAUSBArbSizeSet) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[94]">iDMAUSBChannelAllocate</a> from usbdma.o(i.iDMAUSBChannelAllocate) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[9c]">iDMAUSBChannelDisable</a> from usbdma.o(i.iDMAUSBChannelDisable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[9b]">iDMAUSBChannelEnable</a> from usbdma.o(i.iDMAUSBChannelEnable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[98]">iDMAUSBChannelIntDisable</a> from usbdma.o(i.iDMAUSBChannelIntDisable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[97]">iDMAUSBChannelIntEnable</a> from usbdma.o(i.iDMAUSBChannelIntEnable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[9a]">iDMAUSBChannelRelease</a> from usbdma.o(i.iDMAUSBChannelRelease) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[95]">iDMAUSBChannelStatus</a> from usbdma.o(i.iDMAUSBChannelStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[96]">iDMAUSBIntStatus</a> from usbdma.o(i.iDMAUSBIntStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[99]">iDMAUSBTransfer</a> from usbdma.o(i.iDMAUSBTransfer) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[9d]">iDMAUSBUnitSizeSet</a> from usbdma.o(i.iDMAUSBUnitSizeSet) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[9]">icm20602_read</a> from spi.o(i.icm20602_read) referenced 2 times from main.o(.data)
 <LI><a href="#[8]">icm20602_write</a> from spi.o(i.icm20602_write) referenced 2 times from main.o(.data)
 <LI><a href="#[a0]">led_task</a> from main.o(i.led_task) referenced from main.o(i.main)
 <LI><a href="#[81]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[a2]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[a1]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[a3]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[9f]">send_data</a> from main.o(i.send_data) referenced from main.o(i.main)
 <LI><a href="#[85]">uDMAUSBArbSizeSet</a> from usbdma.o(i.uDMAUSBArbSizeSet) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[86]">uDMAUSBChannelAllocate</a> from usbdma.o(i.uDMAUSBChannelAllocate) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[87]">uDMAUSBChannelDisable</a> from usbdma.o(i.uDMAUSBChannelDisable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[88]">uDMAUSBChannelEnable</a> from usbdma.o(i.uDMAUSBChannelEnable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[8a]">uDMAUSBChannelIntDisable</a> from usbdma.o(i.uDMAUSBChannelIntDisable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[89]">uDMAUSBChannelIntEnable</a> from usbdma.o(i.uDMAUSBChannelIntEnable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[8b]">uDMAUSBChannelRelease</a> from usbdma.o(i.uDMAUSBChannelRelease) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[8c]">uDMAUSBChannelStatus</a> from usbdma.o(i.uDMAUSBChannelStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[8e]">uDMAUSBIntStatus</a> from usbdma.o(i.uDMAUSBIntStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[91]">uDMAUSBTransfer</a> from usbdma.o(i.uDMAUSBTransfer) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[92]">uDMAUSBUnitSizeSet</a> from usbdma.o(i.uDMAUSBUnitSizeSet) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a]">vTaskDelay</a> from tasks.o(i.vTaskDelay) referenced 2 times from main.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[82]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(.text)
</UL>
<P><STRONG><a name="[190]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[b8]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[be]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[191]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[192]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[193]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[194]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[195]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[196]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[189]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[188]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[180]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[d8]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[197]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[da]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[198]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[199]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[19a]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[b7]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))

<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>GPIOA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>GPIOB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>GPIOC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>GPIOD_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>GPIOE_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOE_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOE_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SSI0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PMW0_FAULT_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW0_FAULT_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW0_FAULT_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PWM0_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PWM0_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PWM0_2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>QEI0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC0SS0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC0SS1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC0SS2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC0SS3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>WDT0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER0A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER0B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER1A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIMER1B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIMER2A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIMER2B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>COMP0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>COMP1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>COMP2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SYSCTL_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>FLASH_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>GPIOF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>GPIOG_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOG_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOG_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>GPIOH_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOH_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOH_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SSI1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER3A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER3B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>QEI1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CAN1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CAN2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>HIB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USB0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>PWM0_3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UDMA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UDMAERR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMAERR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMAERR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>ADC1SS0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>ADC1SS1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ADC1SS2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ADC1SS3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>GPIOJ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOJ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOJ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>GPIOK_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOK_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOK_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>GPIOL_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOL_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOL_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SSI2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SSI3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIMER4A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIMER4B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIMER5A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIMER5B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>WTIMER0A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>WTIMER0B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>WTIMER1A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>WTIMER1B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>WTIMER2A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>WTIMER2B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>WTIMER3A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>WTIMER3B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>WTIMER4A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>WTIMER4B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>WTIMER5A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>WTIMER5B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>FPU_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPU_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPU_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIOM_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPION_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPION_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPION_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>QEI2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIOP0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIOP1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIOP2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIOP3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIOP4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIOP5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIOP6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIOP7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIOQ0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPIOQ1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>GPIOQ2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>GPIOQ3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>GPIOQ4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>GPIOQ5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GPIOQ6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>GPIOQ7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>GPIOR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>GPIOS_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOS_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOS_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>PMW1_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW1_0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW1_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>PWM1_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>PWM1_2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>PWM1_3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>PWM1_FAULT_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_FAULT_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_FAULT_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_raw_imu_pack_chan
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[19f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b9]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1a0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>AnoUsbCdcInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ano_usb.o(i.AnoUsbCdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnoUsbCdcInit &rArr; USBDCDCInit &rArr; USBDCDInit &rArr; ULPIConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBStackModeSet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntRegister
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[c4]"></a>AnoUsbCdcSend</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ano_usb.o(i.AnoUsbCdcSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[0]"></a>ControlHandler</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ano_usb.o(i.ControlHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ControlHandler &rArr; USBBufferFlush &rArr; USBRingBufFlush &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferFlush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_serial_structs.o(.data)
</UL>
<P><STRONG><a name="[c9]"></a>Drv_BspInit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, drv_bsp.o(i.Drv_BspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Drv_BspInit &rArr; AnoUsbCdcInit &rArr; USBDCDCInit &rArr; USBDCDInit &rArr; ULPIConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dvr_LedInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoUsbCdcInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>Drv_LedOnOff</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, drv_led.o(i.Drv_LedOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Drv_LedOnOff
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dvr_LedInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
</UL>

<P><STRONG><a name="[ca]"></a>Dvr_LedInit</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, drv_led.o(i.Dvr_LedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dvr_LedInit &rArr; Drv_LedOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LedOnOff
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[126]"></a>IntDisable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[10c]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntRegister
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[125]"></a>IntIsEnabled</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, interrupt.o(i.IntIsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[d7]"></a>IntMasterDisable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufWrite
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufFlush
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufAdvanceRead
</UL>

<P><STRONG><a name="[d9]"></a>IntMasterEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufWrite
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufFlush
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufAdvanceRead
</UL>

<P><STRONG><a name="[11e]"></a>IntRegister</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, interrupt.o(i.IntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntRegister
</UL>

<P><STRONG><a name="[f2]"></a>InternalUSBRegisterTickHandler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usbtick.o(i.InternalUSBRegisterTickHandler))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCCompositeInit
</UL>

<P><STRONG><a name="[11b]"></a>InternalUSBStartOfFrameTick</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbtick.o(i.InternalUSBStartOfFrameTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InternalUSBStartOfFrameTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>

<P><STRONG><a name="[f1]"></a>InternalUSBTickInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usbtick.o(i.InternalUSBTickInit))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCCompositeInit
</UL>

<P><STRONG><a name="[d2]"></a>ProcessDataFromHost</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, usbdcdc.o(i.ProcessDataFromHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProcessDataFromHost
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataAvail
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEndpoints
</UL>

<P><STRONG><a name="[d3]"></a>ProcessDataToHost</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usbdcdc.o(i.ProcessDataToHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProcessDataToHost
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEndpoints
</UL>

<P><STRONG><a name="[2]"></a>RxHandler</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, ano_usb.o(i.RxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RxHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_serial_structs.o(.data)
</UL>
<P><STRONG><a name="[fc]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[fb]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, sysctl.o(i.SysCtlPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysCtlPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[fd]"></a>SysCtlUSBPLLEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlUSBPLLEnable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_bsp.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>TxHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ano_usb.o(i.TxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TxHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_serial_structs.o(.data)
</UL>
<P><STRONG><a name="[e2]"></a>ULPIConfigSet</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbulpi.o(i.ULPIConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ULPIConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBULPIRegWrite
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBULPIRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[83]"></a>USB0DeviceIntHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbdhandler.o(i.USB0DeviceIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USB0DeviceIntHandler &rArr; USBDeviceIntHandlerInternal &rArr; USBDeviceEnumHandler &rArr; USBDEP0StateTxConfig &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntStatusControl
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ano_usb.o(i.AnoUsbCdcInit)
</UL>
<P><STRONG><a name="[1]"></a>USBBufferEventCallback</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, usbbuffer.o(i.USBBufferEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBBufferEventCallback &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufWrite
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufUsed
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufFree
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufContigFree
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufAdvanceWrite
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufAdvanceRead
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleNextTransmission
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_serial_structs.o(.data)
</UL>
<P><STRONG><a name="[c8]"></a>USBBufferFlush</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbbuffer.o(i.USBBufferFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBBufferFlush &rArr; USBRingBufFlush &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlHandler
</UL>

<P><STRONG><a name="[c0]"></a>USBBufferInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbbuffer.o(i.USBBufferInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoUsbCdcInit
</UL>

<P><STRONG><a name="[c5]"></a>USBBufferWrite</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usbbuffer.o(i.USBBufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufWrite
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufFree
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleNextTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoUsbCdcSend
</UL>

<P><STRONG><a name="[fe]"></a>USBClockEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBClockEnable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[11f]"></a>USBControllerVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBControllerVersion))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLibDMAInit
</UL>

<P><STRONG><a name="[ee]"></a>USBDCDCCompositeInit</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, usbdcdc.o(i.USBDCDCCompositeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBDCDCCompositeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDFeatureGet
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDDeviceInfoInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBTickInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBRegisterTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCInit
</UL>

<P><STRONG><a name="[c2]"></a>USBDCDCInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbdcdc.o(i.USBDCDCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBDCDCInit &rArr; USBDCDInit &rArr; ULPIConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCCompositeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoUsbCdcInit
</UL>

<P><STRONG><a name="[3]"></a>USBDCDCPacketRead</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, usbdcdc.o(i.USBDCDCPacketRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBDCDCPacketRead &rArr; USBEndpointDataGet
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataGet
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataAvail
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStatusClear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_serial_structs.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBDCDCPacketWrite</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbdcdc.o(i.USBDCDCPacketWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBDCDCPacketWrite &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_serial_structs.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBDCDCRxPacketAvailable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbdcdc.o(i.USBDCDCRxPacketAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDCDCRxPacketAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataAvail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_serial_structs.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBDCDCTxPacketAvailable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbdcdc.o(i.USBDCDCTxPacketAvailable))
<BR>[Address Reference Count : 1]<UL><LI> usb_serial_structs.o(.data)
</UL>
<P><STRONG><a name="[f5]"></a>USBDCDConfigDescGet</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, usbdcdesc.o(i.USBDCDConfigDescGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBDCDConfigDescGet &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGetNum
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGet
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
</UL>

<P><STRONG><a name="[f8]"></a>USBDCDConfigDescGetNum</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, usbdcdesc.o(i.USBDCDConfigDescGetNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBDCDConfigDescGetNum &rArr; USBDescGetNum
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGetNum
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfigAlternate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetInterface
</UL>

<P><STRONG><a name="[111]"></a>USBDCDConfigDescGetSize</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbdcdesc.o(i.USBDCDConfigDescGetSize))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetDescriptor
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTxConfig
</UL>

<P><STRONG><a name="[f9]"></a>USBDCDConfigGetInterface</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, usbdcdesc.o(i.USBDCDConfigGetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGetNum
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGet
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterfaceEndpoint
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfigAlternate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetInterface
</UL>

<P><STRONG><a name="[fa]"></a>USBDCDConfigGetInterfaceEndpoint</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usbdcdesc.o(i.USBDCDConfigGetInterfaceEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBDCDConfigGetInterfaceEndpoint &rArr; USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfigAlternate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
</UL>

<P><STRONG><a name="[f0]"></a>USBDCDDeviceInfoInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, usbdenum.o(i.USBDCDDeviceInfoInit))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCCompositeInit
</UL>

<P><STRONG><a name="[ef]"></a>USBDCDFeatureGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbdenum.o(i.USBDCDFeatureGet))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCCompositeInit
</UL>

<P><STRONG><a name="[f3]"></a>USBDCDInit</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, usbdenum.o(i.USBDCDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBDCDInit &rArr; ULPIConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBULPIEnable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBULPIDisable
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBOTGMode
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLPMIntEnable
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntStatusEndpoint
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntStatusControl
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntEnableEndpoint
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntEnableControl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevLPMEnable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevLPMDisable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevLPMConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevConnect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBClockEnable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlUSBPLLEnable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBTickInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLibDMAInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULPIConfigSet
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCInit
</UL>

<P><STRONG><a name="[d4]"></a>USBDCDRequestDataEP0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbdenum.o(i.USBDCDRequestDataEP0))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRequests
</UL>

<P><STRONG><a name="[d6]"></a>USBDCDSendDataEP0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbdenum.o(i.USBDCDSendDataEP0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBDCDSendDataEP0 &rArr; USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRequests
</UL>

<P><STRONG><a name="[ce]"></a>USBDCDStallEP0</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbdenum.o(i.USBDCDStallEP0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDCDStallEP0
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRequests
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEP0Data
</UL>

<P><STRONG><a name="[12b]"></a>USBDMAChannelAddressSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelAddressSet))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[12f]"></a>USBDMAChannelConfigSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[12c]"></a>USBDMAChannelCountSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelCountSet))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[123]"></a>USBDMAChannelDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelDisable))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelRelease
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelDisable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelAllocate
</UL>

<P><STRONG><a name="[128]"></a>USBDMAChannelEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelEnable))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[124]"></a>USBDMAChannelIntDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelIntDisable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelDisable
</UL>

<P><STRONG><a name="[127]"></a>USBDMAChannelIntEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelIntEnable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[12a]"></a>USBDMAChannelIntStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBIntStatus
</UL>

<P><STRONG><a name="[129]"></a>USBDMAChannelStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelStatus))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelStatus
</UL>

<P><STRONG><a name="[f7]"></a>USBDescGet</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, usbdesc.o(i.USBDescGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBDescGet
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
</UL>

<P><STRONG><a name="[f6]"></a>USBDescGetNum</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbdesc.o(i.USBDescGetNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDescGetNum
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetNum
</UL>

<P><STRONG><a name="[118]"></a>USBDevAddrSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb.o(i.USBDevAddrSet))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
</UL>

<P><STRONG><a name="[10b]"></a>USBDevConnect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBDevConnect))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[11a]"></a>USBDevDisconnect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBDevDisconnect))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>

<P><STRONG><a name="[115]"></a>USBDevEndpointConfigSet</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, usb.o(i.USBDevEndpointConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfigAlternate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
</UL>

<P><STRONG><a name="[d5]"></a>USBDevEndpointDataAck</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb.o(i.USBDevEndpointDataAck))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketRead
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRequests
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSyncFrame
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetInterface
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetFeature
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetDescriptor
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetConfiguration
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetAddress
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetStatus
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetInterface
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetDescriptor
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetConfiguration
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClearFeature
</UL>

<P><STRONG><a name="[10e]"></a>USBDevEndpointStall</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usb.o(i.USBDevEndpointStall))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDStallEP0
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSyncFrame
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetInterface
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetFeature
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetDescriptor
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetConfiguration
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDReadAndDispatchRequest
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetStatus
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetInterface
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetDescriptor
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClearFeature
</UL>

<P><STRONG><a name="[10f]"></a>USBDevEndpointStallClear</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, usb.o(i.USBDevEndpointStallClear))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClearFeature
</UL>

<P><STRONG><a name="[d0]"></a>USBDevEndpointStatusClear</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, usb.o(i.USBDevEndpointStatusClear))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketRead
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataToHost
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFromHost
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEndpoints
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
</UL>

<P><STRONG><a name="[103]"></a>USBDevLPMConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb.o(i.USBDevLPMConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[106]"></a>USBDevLPMDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb.o(i.USBDevLPMDisable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[105]"></a>USBDevLPMEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb.o(i.USBDevLPMEnable))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[102]"></a>USBDevMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb.o(i.USBDevMode))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[113]"></a>USBDeviceConfig</STRONG> (Thumb, 410 bytes, Stack size 112 bytes, usbdconfig.o(i.USBDeviceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = USBDeviceConfig &rArr; USBDCDConfigGetInterfaceEndpoint &rArr; USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFIFOConfigSet
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointConfigSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterfaceEndpoint
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetNum
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetConfiguration
</UL>

<P><STRONG><a name="[114]"></a>USBDeviceConfigAlternate</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, usbdconfig.o(i.USBDeviceConfigAlternate))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBDeviceConfigAlternate &rArr; USBDCDConfigGetInterfaceEndpoint &rArr; USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointConfigSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterfaceEndpoint
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetNum
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetInterface
</UL>

<P><STRONG><a name="[117]"></a>USBDeviceEnumHandler</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, usbdenum.o(i.USBDeviceEnumHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBDeviceEnumHandler &rArr; USBDEP0StateTxConfig &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataGet
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStatusClear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevAddrSet
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDReadAndDispatchRequest
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTxConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>

<P><STRONG><a name="[e6]"></a>USBDeviceIntHandlerInternal</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, usbdenum.o(i.USBDeviceIntHandlerInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBDeviceIntHandlerInternal &rArr; USBDeviceEnumHandler &rArr; USBDEP0StateTxConfig &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLPMIntStatus
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntStatusEndpoint
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevLPMEnable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevDisconnect
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBStartOfFrameTick
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceResumeTickHandler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0DeviceIntHandler
</UL>

<P><STRONG><a name="[119]"></a>USBDeviceResumeTickHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usbdenum.o(i.USBDeviceResumeTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDeviceResumeTickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostResume
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>

<P><STRONG><a name="[178]"></a>USBEndpointDMAChannel</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDMAChannel))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelAllocate
</UL>

<P><STRONG><a name="[12e]"></a>USBEndpointDMAConfigSet</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDMAConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[131]"></a>USBEndpointDMADisable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDMADisable))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelRelease
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelAllocate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[130]"></a>USBEndpointDMAEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDMAEnable))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[c7]"></a>USBEndpointDataAvail</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDataAvail))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCRxPacketAvailable
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketRead
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFromHost
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCTickHandler
</UL>

<P><STRONG><a name="[f4]"></a>USBEndpointDataGet</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, usb.o(i.USBEndpointDataGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBEndpointDataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketRead
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDReadAndDispatchRequest
</UL>

<P><STRONG><a name="[df]"></a>USBEndpointDataPut</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, usb.o(i.USBEndpointDataPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBEndpointDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketWrite
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSerialState
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTxConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>

<P><STRONG><a name="[db]"></a>USBEndpointDataSend</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDataSend))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketWrite
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataToHost
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSerialState
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTxConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>

<P><STRONG><a name="[12d]"></a>USBEndpointPacketCountSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb.o(i.USBEndpointPacketCountSet))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[cf]"></a>USBEndpointStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb.o(i.USBEndpointStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCRxPacketAvailable
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketRead
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataToHost
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFromHost
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEndpoints
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
</UL>

<P><STRONG><a name="[17d]"></a>USBFIFOAddrGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb.o(i.USBFIFOAddrGet))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
</UL>

<P><STRONG><a name="[116]"></a>USBFIFOConfigSet</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, usb.o(i.USBFIFOConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
</UL>

<P><STRONG><a name="[11d]"></a>USBHostResume</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBHostResume))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceResumeTickHandler
</UL>

<P><STRONG><a name="[109]"></a>USBIntEnableControl</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb.o(i.USBIntEnableControl))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[10a]"></a>USBIntEnableEndpoint</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb.o(i.USBIntEnableEndpoint))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[c3]"></a>USBIntRegister</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usb.o(i.USBIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoUsbCdcInit
</UL>

<P><STRONG><a name="[e5]"></a>USBIntStatusControl</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, usb.o(i.USBIntStatusControl))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0DeviceIntHandler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[108]"></a>USBIntStatusEndpoint</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBIntStatusEndpoint))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[104]"></a>USBLPMIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb.o(i.USBLPMIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[11c]"></a>USBLPMIntStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb.o(i.USBLPMIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>

<P><STRONG><a name="[107]"></a>USBLibDMAInit</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, usbdma.o(i.USBLibDMAInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBLibDMAInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBControllerVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[101]"></a>USBOTGMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb.o(i.USBOTGMode))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[eb]"></a>USBRingBufAdvanceRead</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbringbuf.o(i.USBRingBufAdvanceRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBRingBufAdvanceRead &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
</UL>

<P><STRONG><a name="[e7]"></a>USBRingBufAdvanceWrite</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufAdvanceWrite))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
</UL>

<P><STRONG><a name="[ea]"></a>USBRingBufContigFree</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufContigFree))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
</UL>

<P><STRONG><a name="[dd]"></a>USBRingBufContigUsed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufContigUsed))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleNextTransmission
</UL>

<P><STRONG><a name="[ec]"></a>USBRingBufFlush</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbringbuf.o(i.USBRingBufFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBRingBufFlush &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferFlush
</UL>

<P><STRONG><a name="[e8]"></a>USBRingBufFree</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufFree))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferWrite
</UL>

<P><STRONG><a name="[ed]"></a>USBRingBufInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufInit))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferInit
</UL>

<P><STRONG><a name="[de]"></a>USBRingBufUsed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufUsed))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleNextTransmission
</UL>

<P><STRONG><a name="[e9]"></a>USBRingBufWrite</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usbringbuf.o(i.USBRingBufWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferWrite
</UL>

<P><STRONG><a name="[c1]"></a>USBStackModeSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbmode.o(i.USBStackModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoUsbCdcInit
</UL>

<P><STRONG><a name="[100]"></a>USBULPIDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb.o(i.USBULPIDisable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[ff]"></a>USBULPIEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb.o(i.USBULPIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[e3]"></a>USBULPIRegRead</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb.o(i.USBULPIRegRead))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULPIConfigSet
</UL>

<P><STRONG><a name="[e4]"></a>USBULPIRegWrite</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb.o(i.USBULPIRegWrite))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULPIConfigSet
</UL>

<P><STRONG><a name="[120]"></a>__0printf$3</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a3]"></a>__1printf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)

<P><STRONG><a name="[15e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1a4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1a5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1a6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[135]"></a>_read_data</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, icm20602.o(i._read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_read_data_raw
</UL>

<P><STRONG><a name="[9e]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ano_usb.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fputc &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoUsbCdcSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0printf$3)
</UL>
<P><STRONG><a name="[174]"></a>icm20602_init</STRONG> (Thumb, 612 bytes, Stack size 24 bytes, icm20602.o(i.icm20602_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icm20602_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[176]"></a>icm20602_pin_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, spi.o(i.icm20602_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icm20602_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[9]"></a>icm20602_read</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, spi.o(i.icm20602_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icm20602_read &rArr; spi_receive &rArr; spi_single_send
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_single_send
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[134]"></a>icm20602_read_data_raw</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, icm20602.o(i.icm20602_read_data_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = icm20602_read_data_raw &rArr; _read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[8]"></a>icm20602_write</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, spi.o(i.icm20602_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icm20602_write &rArr; spi_transmit &rArr; spi_single_send
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transmit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_single_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>led_task</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(i.led_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = led_task &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LedOnOff
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[81]"></a>main</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[171]"></a>pvPortMalloc</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[18b]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[160]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[9f]"></a>send_data</STRONG> (Thumb, 104 bytes, Stack size 120 bytes, main.o(i.send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = send_data &rArr; mavlink_msg_raw_imu_encode_chan &rArr; mavlink_msg_raw_imu_pack_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_read_data_raw
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_raw_imu_encode_chan
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoUsbCdcSend
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[cb]"></a>spi_init</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, spi.o(i.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_init &rArr; icm20602_pin_init
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[133]"></a>spi_receive</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spi.o(i.spi_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_receive &rArr; spi_single_send
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_single_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_read
</UL>

<P><STRONG><a name="[132]"></a>spi_single_send</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi.o(i.spi_single_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_single_send
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transmit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_receive
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_write
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_read
</UL>

<P><STRONG><a name="[136]"></a>spi_transmit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, spi.o(i.spi_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_transmit &rArr; spi_single_send
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_single_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_write
</UL>

<P><STRONG><a name="[179]"></a>uDMAChannelAttributeDisable</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelAttributeDisable))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelRelease
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelAllocate
</UL>

<P><STRONG><a name="[177]"></a>uDMAChannelControlSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelControlSet))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBUnitSizeSet
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelAllocate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBArbSizeSet
</UL>

<P><STRONG><a name="[17a]"></a>uDMAChannelDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelDisable))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelDisable
</UL>

<P><STRONG><a name="[17b]"></a>uDMAChannelEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelEnable))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[17c]"></a>uDMAChannelModeGet</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelModeGet))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBIntStatus
</UL>

<P><STRONG><a name="[17e]"></a>uDMAChannelTransferSet</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, udma.o(i.uDMAChannelTransferSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uDMAChannelTransferSet
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
</UL>

<P><STRONG><a name="[148]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
</UL>

<P><STRONG><a name="[150]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[15f]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[14a]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[149]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>

<P><STRONG><a name="[14c]"></a>vPortEnterCritical</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vPortEnterCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[14e]"></a>vPortExitCritical</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[15a]"></a>vPortFree</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[187]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[17f]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[152]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[16c]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[a]"></a>vTaskDelay</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[138]"></a>vTaskDelayUntil</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, tasks.o(i.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
</UL>

<P><STRONG><a name="[170]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[182]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[181]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[183]"></a>vTaskPriorityInherit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[184]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSetTimeOutState &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[13a]"></a>vTaskStartScheduler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[ba]"></a>vTaskSwitchContext</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSwitchContext &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[186]"></a>xPortStartScheduler</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xPortStartScheduler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[e1]"></a>xPortSysTickHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[151]"></a>xQueueGenericCreate</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[16a]"></a>xQueueGenericReceive</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[15c]"></a>xQueueGenericReset</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[18d]"></a>xQueueGenericSend</STRONG> (Thumb, 412 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[18e]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[18c]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[139]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[137]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
</UL>

<P><STRONG><a name="[18a]"></a>xTaskIncrementTick</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[159]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[165]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[155]"></a>xTaskResumeAll</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[185]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[167]"></a>xTimerGenericCommand</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[157]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[158]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[15b]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[162]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[163]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[164]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, queue.o(i.prvNotifyQueueSetContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[16f]"></a>prvUnlockQueue</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[147]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[14b]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvAddNewTaskToReadyList &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[153]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[156]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[a2]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[15d]"></a>prvInitialiseNewTask</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvInitialiseNewTask &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[14d]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[18f]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[14f]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[16e]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[161]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[166]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[168]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[16b]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[169]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[16d]"></a>prvSwitchTimerLists</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[a3]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[a1]"></a>prvTaskExitError</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvTaskExitError &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[172]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[173]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[cc]"></a>SysTick_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, drv_bsp.o(i.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[13c]"></a>_mav_trim_payload</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i._mav_trim_payload))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[13d]"></a>crc_accumulate</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.crc_accumulate))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[13b]"></a>mavlink_finalize_message_buffer</STRONG> (Thumb, 416 bytes, Stack size 88 bytes, main.o(i.mavlink_finalize_message_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_trim_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_raw_imu_pack_chan
</UL>

<P><STRONG><a name="[13f]"></a>mavlink_msg_raw_imu_encode_chan</STRONG> (Thumb, 106 bytes, Stack size 80 bytes, main.o(i.mavlink_msg_raw_imu_encode_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = mavlink_msg_raw_imu_encode_chan &rArr; mavlink_msg_raw_imu_pack_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_raw_imu_pack_chan
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[140]"></a>mavlink_msg_raw_imu_pack_chan</STRONG> (Thumb, 160 bytes, Stack size 96 bytes, main.o(i.mavlink_msg_raw_imu_pack_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = mavlink_msg_raw_imu_pack_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_raw_imu_encode_chan
</UL>

<P><STRONG><a name="[142]"></a>mavlink_msg_to_send_buffer</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, main.o(i.mavlink_msg_to_send_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mavlink_msg_to_send_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_trim_payload
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[146]"></a>mavlink_sha256_calc</STRONG> (Thumb, 474 bytes, Stack size 304 bytes, main.o(i.mavlink_sha256_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mavlink_sha256_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
</UL>

<P><STRONG><a name="[144]"></a>mavlink_sha256_final_48</STRONG> (Thumb, 170 bytes, Stack size 96 bytes, main.o(i.mavlink_sha256_final_48))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
</UL>

<P><STRONG><a name="[145]"></a>mavlink_sha256_update</STRONG> (Thumb, 152 bytes, Stack size 104 bytes, main.o(i.mavlink_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_calc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
</UL>

<P><STRONG><a name="[13e]"></a>mavlink_sign_packet</STRONG> (Thumb, 184 bytes, Stack size 144 bytes, main.o(i.mavlink_sign_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[dc]"></a>ScheduleNextTransmission</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usbbuffer.o(i.ScheduleNextTransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ScheduleNextTransmission
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufUsed
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufContigUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferWrite
</UL>

<P><STRONG><a name="[84]"></a>CDCTickHandler</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, usbdcdc.o(i.CDCTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CDCTickHandler &rArr; SendBreak
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataAvail
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBreak
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(i.USBDCDCCompositeInit)
</UL>
<P><STRONG><a name="[a5]"></a>HandleConfigChange</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbdcdc.o(i.HandleConfigChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HandleConfigChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>HandleDevice</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, usbdcdc.o(i.HandleDevice))
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>HandleDisconnect</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbdcdc.o(i.HandleDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HandleDisconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>HandleEP0Data</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, usbdcdc.o(i.HandleEP0Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HandleEP0Data &rArr; USBDCDStallEP0
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDStallEP0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>HandleEndpoints</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, usbdcdc.o(i.HandleEndpoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HandleEndpoints &rArr; SendSerialState &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStatusClear
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataToHost
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFromHost
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSerialState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>HandleRequests</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, usbdcdc.o(i.HandleRequests))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HandleRequests &rArr; USBDCDSendDataEP0 &rArr; USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDStallEP0
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDSendDataEP0
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDRequestDataEP0
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBreak
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>HandleResume</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbdcdc.o(i.HandleResume))
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>HandleSuspend</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbdcdc.o(i.HandleSuspend))
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>SendBreak</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usbdcdc.o(i.SendBreak))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendBreak
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRequests
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCTickHandler
</UL>

<P><STRONG><a name="[d1]"></a>SendSerialState</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, usbdcdc.o(i.SendSerialState))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SendSerialState &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEndpoints
</UL>

<P><STRONG><a name="[ad]"></a>USBDClearFeature</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, usbdenum.o(i.USBDClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBDClearFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStallClear
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>USBDEP0StateTx</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbdenum.o(i.USBDEP0StateTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDSendDataEP0
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetStatus
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetInterface
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetDescriptor
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetConfiguration
</UL>

<P><STRONG><a name="[110]"></a>USBDEP0StateTxConfig</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, usbdenum.o(i.USBDEP0StateTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBDEP0StateTxConfig &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataPut
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetSize
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetDescriptor
</UL>

<P><STRONG><a name="[b2]"></a>USBDGetConfiguration</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbdenum.o(i.USBDGetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBDGetConfiguration &rArr; USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>USBDGetDescriptor</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, usbdenum.o(i.USBDGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBDGetDescriptor &rArr; USBDEP0StateTxConfig &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetSize
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTxConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>USBDGetInterface</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbdenum.o(i.USBDGetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBDGetInterface &rArr; USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>USBDGetStatus</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, usbdenum.o(i.USBDGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBDGetStatus &rArr; USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>USBDReadAndDispatchRequest</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usbdenum.o(i.USBDReadAndDispatchRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBDReadAndDispatchRequest &rArr; USBEndpointDataGet
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataGet
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
</UL>

<P><STRONG><a name="[af]"></a>USBDSetAddress</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbdenum.o(i.USBDSetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBDSetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>USBDSetConfiguration</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, usbdenum.o(i.USBDSetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USBDSetConfiguration &rArr; USBDeviceConfig &rArr; USBDCDConfigGetInterfaceEndpoint &rArr; USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>USBDSetDescriptor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbdenum.o(i.USBDSetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDSetDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>USBDSetFeature</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, usbdenum.o(i.USBDSetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBDSetFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>USBDSetInterface</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, usbdenum.o(i.USBDSetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBDSetInterface &rArr; USBDeviceConfigAlternate &rArr; USBDCDConfigGetInterfaceEndpoint &rArr; USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfigAlternate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>USBDSyncFrame</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbdenum.o(i.USBDSyncFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDSyncFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>DMAUSBIntHandler</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, usbdma.o(i.DMAUSBIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMAUSBIntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[8f]"></a>DMAUSBIntStatusClear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbdma.o(i.DMAUSBIntStatusClear))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[90]"></a>DMAUSBStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbdma.o(i.DMAUSBStatus))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[93]"></a>iDMAUSBArbSizeSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBArbSizeSet))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[94]"></a>iDMAUSBChannelAllocate</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usbdma.o(i.iDMAUSBChannelAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iDMAUSBChannelAllocate
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[9c]"></a>iDMAUSBChannelDisable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbdma.o(i.iDMAUSBChannelDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iDMAUSBChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntDisable
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[9b]"></a>iDMAUSBChannelEnable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usbdma.o(i.iDMAUSBChannelEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iDMAUSBChannelEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntEnable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelEnable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIsEnabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[98]"></a>iDMAUSBChannelIntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBChannelIntDisable))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[97]"></a>iDMAUSBChannelIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBChannelIntEnable))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[9a]"></a>iDMAUSBChannelRelease</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbdma.o(i.iDMAUSBChannelRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iDMAUSBChannelRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[95]"></a>iDMAUSBChannelStatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbdma.o(i.iDMAUSBChannelStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iDMAUSBChannelStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[96]"></a>iDMAUSBIntStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBIntStatus))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[99]"></a>iDMAUSBTransfer</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, usbdma.o(i.iDMAUSBTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iDMAUSBTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointPacketCountSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAEnable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAConfigSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelEnable
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelCountSet
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelConfigSet
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelAddressSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[9d]"></a>iDMAUSBUnitSizeSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBUnitSizeSet))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[85]"></a>uDMAUSBArbSizeSet</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, usbdma.o(i.uDMAUSBArbSizeSet))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelControlSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[86]"></a>uDMAUSBChannelAllocate</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, usbdma.o(i.uDMAUSBChannelAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uDMAUSBChannelAllocate
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAChannel
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelControlSet
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelAttributeDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[87]"></a>uDMAUSBChannelDisable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbdma.o(i.uDMAUSBChannelDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uDMAUSBChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[88]"></a>uDMAUSBChannelEnable</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usbdma.o(i.uDMAUSBChannelEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uDMAUSBChannelEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAEnable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIsEnabled
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[8a]"></a>uDMAUSBChannelIntDisable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdma.o(i.uDMAUSBChannelIntDisable))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[89]"></a>uDMAUSBChannelIntEnable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdma.o(i.uDMAUSBChannelIntEnable))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[8b]"></a>uDMAUSBChannelRelease</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbdma.o(i.uDMAUSBChannelRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uDMAUSBChannelRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelAttributeDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[8c]"></a>uDMAUSBChannelStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbdma.o(i.uDMAUSBChannelStatus))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[8e]"></a>uDMAUSBIntStatus</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usbdma.o(i.uDMAUSBIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uDMAUSBIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelModeGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[91]"></a>uDMAUSBTransfer</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, usbdma.o(i.uDMAUSBTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uDMAUSBTransfer &rArr; uDMAChannelTransferSet
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFIFOAddrGet
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointPacketCountSet
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAConfigSet
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelTransferSet
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[92]"></a>uDMAUSBUnitSizeSet</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usbdma.o(i.uDMAUSBUnitSizeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uDMAUSBUnitSizeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelControlSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[121]"></a>_printf_core</STRONG> (Thumb, 436 bytes, Stack size 96 bytes, printf3.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$3
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
